<?xml version="1.0" encoding="UTF-8"?>
<configuration>

    <!--可以直接引入spring定义的配置文件-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />

    <property resource="application-prod.properties" />

<!--    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />-->
<!--    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />-->
<!--    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />-->
<!--    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(-&#45;&#45;){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>-->
<!--    <property name="FILE_LOG_PATTERN" value="${FILE_LOG_PATTERN:-%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } -&#45;&#45; [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>-->

    <!--由于logback的xml配置文件加载优先于spring的配置文件, 因此不能直接获取application的内容, 需要通过springProperty标签获取-->
    <springProperty scope="context" name="application" source="spring.application.name"/>
    <property name="LOG_PATH" value="${user.home}/logs/${application}"/>

    <!--控制台输出-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
        </encoder>
    </appender>

    <!--日志文件输出-->
    <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/info_%d.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/error_%d.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <!--参考spring的默认配置-->
<!--    <logger name="org.apache.catalina.startup.DigesterFactory" level="ERROR"/>-->
<!--    <logger name="org.apache.catalina.util.LifecycleBase" level="ERROR"/>-->
<!--    <logger name="org.apache.coyote.http11.Http11NioProtocol" level="WARN"/>-->
<!--    <logger name="org.apache.sshd.common.util.SecurityUtils" level="WARN"/>-->
<!--    <logger name="org.apache.tomcat.util.net.NioSelectorPool" level="WARN"/>-->
<!--    <logger name="org.eclipse.jetty.util.component.AbstractLifeCycle" level="ERROR"/>-->
<!--    <logger name="org.hibernate.validator.internal.util.Version" level="WARN"/>-->

    <!--异步输出,核心在ch.qos.logback.core.AsyncAppenderBase类中-->
    <appender name="ASYNC_INFO" class="ch.qos.logback.classic.AsyncAppender">
        <!--不丢失日志.默认的是如果队列的80%已满,则会丢弃TRACE,DEBUG,INFO级别的日志-->
        <discardingThreshold>0</discardingThreshold>
        <!--队列的深度,默认256-->
        <queueSize>256</queueSize>
        <!--只能添加一个-->
        <appender-ref ref="INFO_FILE"/>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="INFO_FILE"/>
        <appender-ref ref="ERROR_FILE"/>
    </root>

</configuration>